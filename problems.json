[
  {
    "id": "binary-tree-traversal-1",
    "title": "Binary Tree Traversal",
    "problemStatement": "Write a function to perform inorder traversal of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,null,2,3]",
        "outputText": "Output: [1,3,2]",
        "explanation": "Explanation: Inorder traversal returns [1,3,2]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 100)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 1,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,null,2,3]"],
      "output": ["[1,3,2]"]
    }
  },
  {
    "id": "binary-tree-level-order-traversal-1",
    "title": "Binary Tree Level Order Traversal",
    "problemStatement": "Write a function to perform level order traversal of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [3,9,20,null,null,15,7]",
        "outputText": "Output: [[3],[9,20],[15,7]]",
        "explanation": "Explanation: Level order traversal returns [[3],[9,20],[15,7]]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (0 ≤ n ≤ 1000)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 2,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,9,20,null,null,15,7]"],
      "output": ["[[3],[9,20],[15,7]]"]
    }
  },
  {
    "id": "binary-search-tree-insertion-1",
    "title": "Binary Search Tree Insertion",
    "problemStatement": "Write a function to insert a value into a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: 5, tree: [4,2,7,1,3]",
        "outputText": "Output: [4,2,7,1,3,5]",
        "explanation": "Explanation: Inserting 5 into the binary search tree results in [4,2,7,1,3,5]."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Easy",
    "category": "Binary Search Tree",
    "order": 3,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["5", "[4,2,7,1,3]"],
      "output": ["[4,2,7,1,3,5]"]
    }
  },
  {
    "id": "binary-search-tree-deletion-1",
    "title": "Binary Search Tree Deletion",
    "problemStatement": "Write a function to delete a value from a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: 5, tree: [4,2,7,1,3]",
        "outputText": "Output: [4,2,7,1]",
        "explanation": "Explanation: Deleting 5 from the binary search tree results in [4,2,7,1]."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 4,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["5", "[4,2,7,1,3]"],
      "output": ["[4,2,7,1]"]
    }
  },
  {
    "id": "binary-tree-diameter-1",
    "title": "Binary Tree Diameter",
    "problemStatement": "Write a function to find the diameter of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,4,5]",
        "outputText": "Output: 3",
        "explanation": "Explanation: The diameter of the binary tree is 3."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 5,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,4,5]"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-tree-maximum-path-sum-1",
    "title": "Binary Tree Maximum Path Sum",
    "problemStatement": "Write a function to find the maximum path sum in a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [-10,9,20,null,null,15,7]",
        "outputText": "Output: 42",
        "explanation": "Explanation: The maximum path sum is 42."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 6,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[-10,9,20,null,null,15,7]"],
      "output": ["42"]
    }
  },
  {
    "id": "binary-tree-lowest-common-ancestor-1",
    "title": "Binary Tree Lowest Common Ancestor",
    "problemStatement": "Write a function to find the lowest common ancestor of two nodes in a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "outputText": "Output: 3",
        "explanation": "Explanation: The lowest common ancestor of nodes 5 and 1 is 3."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 7,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,5,1,6,2,0,8,null,null,7,4]", "5", "1"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-search-tree-validity-check-1",
    "title": "Binary Search Tree Validity Check",
    "problemStatement": "Write a function to check if a binary tree is a valid binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [2,1,3]",
        "outputText": "Output: true",
        "explanation": "Explanation: The binary tree [2,1,3] is a valid binary search tree."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 8,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[2,1,3]"],
      "output": ["true"]
    }
  },
  {
    "id": "binary-search-tree-inorder-successor-1",
    "title": "Binary Search Tree Inorder Successor",
    "problemStatement": "Write a function to find the inorder successor of a given node in a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [2,1,3], p = 1",
        "outputText": "Output: 2",
        "explanation": "Explanation: The inorder successor of node 1 in the binary search tree is 2."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 9,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[2,1,3]", "1"],
      "output": ["2"]
    }
  },
  {
    "id": "binary-tree-diameter-2",
    "title": "Binary Tree Diameter",
    "problemStatement": "Write a function to find the diameter of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,4,5]",
        "outputText": "Output: 3",
        "explanation": "Explanation: The diameter of the binary tree is 3."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 10,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,4,5]"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-tree-maximum-path-sum-1",
    "title": "Binary Tree Maximum Path Sum",
    "problemStatement": "Write a function to find the maximum path sum in a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [-10,9,20,null,null,15,7]",
        "outputText": "Output: 42",
        "explanation": "Explanation: The maximum path sum is 42."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 1,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[-10,9,20,null,null,15,7]"],
      "output": ["42"]
    }
  },
  {
    "id": "binary-tree-lowest-common-ancestor-1",
    "title": "Binary Tree Lowest Common Ancestor",
    "problemStatement": "Write a function to find the lowest common ancestor of two nodes in a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "outputText": "Output: 3",
        "explanation": "Explanation: The lowest common ancestor of nodes 5 and 1 is 3."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 2,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,5,1,6,2,0,8,null,null,7,4]", "5", "1"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-search-tree-validity-check-1",
    "title": "Binary Search Tree Validity Check",
    "problemStatement": "Write a function to check if a binary tree is a valid binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [2,1,3]",
        "outputText": "Output: true",
        "explanation": "Explanation: The binary tree [2,1,3] is a valid binary search tree."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 3,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[2,1,3]"],
      "output": ["true"]
    }
  },
  {
    "id": "binary-search-tree-inorder-successor-1",
    "title": "Binary Search Tree Inorder Successor",
    "problemStatement": "Write a function to find the inorder successor of a given node in a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [2,1,3], p = 1",
        "outputText": "Output: 2",
        "explanation": "Explanation: The inorder successor of node 1 in the binary search tree is 2."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 4,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[2,1,3]", "1"],
      "output": ["2"]
    }
  },
  {
    "id": "binary-tree-diameter-2",
    "title": "Binary Tree Diameter",
    "problemStatement": "Write a function to find the diameter of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,4,5]",
        "outputText": "Output: 3",
        "explanation": "Explanation: The diameter of the binary tree is 3."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 5,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,4,5]"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-tree-maximum-depth-2",
    "title": "Binary Tree Maximum Depth",
    "problemStatement": "Write a function to find the maximum depth of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [3,9,20,null,null,15,7]",
        "outputText": "Output: 3",
        "explanation": "Explanation: The maximum depth of the binary tree is 3."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Easy",
    "category": "Binary Tree",
    "order": 6,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,9,20,null,null,15,7]"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-tree-level-order-traversal-2",
    "title": "Binary Tree Level Order Traversal",
    "problemStatement": "Write a function to perform level order traversal of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [3,9,20,null,null,15,7]",
        "outputText": "Output: [[3],[9,20],[15,7]]",
        "explanation": "Explanation: The level order traversal of the binary tree is [[3],[9,20],[15,7]]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 7,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,9,20,null,null,15,7]"],
      "output": ["[[3],[9,20],[15,7]]"]
    }
  },
  {
    "id": "binary-search-tree-insertion-2",
    "title": "Binary Search Tree Insertion",
    "problemStatement": "Write a function to insert a node into a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [4,2,7,1,3], val = 5",
        "outputText": "Output: [4,2,7,1,3,5]",
        "explanation": "Explanation: After inserting 5 into the binary search tree, the new tree is [4,2,7,1,3,5]."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Easy",
    "category": "Binary Search Tree",
    "order": 8,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[4,2,7,1,3]", "5"],
      "output": ["[4,2,7,1,3,5]"]
    }
  },
  {
    "id": "binary-search-tree-deletion-2",
    "title": "Binary Search Tree Deletion",
    "problemStatement": "Write a function to delete a node from a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [5,3,6,2,4,null,7], key = 3",
        "outputText": "Output: [5,4,6,2,null,null,7]",
        "explanation": "Explanation: After deleting node 3 from the binary search tree, the new tree is [5,4,6,2,null,null,7]."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 9,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[5,3,6,2,4,null,7]", "3"],
      "output": ["[5,4,6,2,null,null,7]"]
    }
  },

  {
    "id": "binary-search-tree-search-2",
    "title": "Binary Search Tree Search",
    "problemStatement": "Write a function to search for a value in a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [4,2,7,1,3], val = 5",
        "outputText": "Output: false",
        "explanation": "Explanation: The value 5 does not exist in the binary search tree."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Easy",
    "category": "Binary Search Tree",
    "order": 10,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[4,2,7,1,3]", "5"],
      "output": ["false"]
    }
  },
  {
    "id": "binary-tree-zigzag-level-order-traversal-2",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "problemStatement": "Write a function to perform zigzag level order traversal of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [3,9,20,null,null,15,7]",
        "outputText": "Output: [[3],[20,9],[15,7]]",
        "explanation": "Explanation: The zigzag level order traversal of the binary tree is [[3],[20,9],[15,7]]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 11,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,9,20,null,null,15,7]"],
      "output": ["[[3],[20,9],[15,7]]"]
    }
  },

  {
    "id": "binary-tree-symmetric-check-2",
    "title": "Binary Tree Symmetric Check",
    "problemStatement": "Write a function to check if a binary tree is symmetric.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,2,3,4,4,3]",
        "outputText": "Output: true",
        "explanation": "Explanation: The binary tree [1,2,2,3,4,4,3] is symmetric."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 1000)</li>",
    "difficulty": "Easy",
    "category": "Binary Tree",
    "order": 12,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,2,3,4,4,3]"],
      "output": ["true"]
    }
  },
  {
    "id": "binary-tree-right-side-view-2",
    "title": "Binary Tree Right Side View",
    "problemStatement": "Write a function to find the right side view of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,null,5,null,4]",
        "outputText": "Output: [1,3,4]",
        "explanation": "Explanation: The right side view of the binary tree is [1,3,4]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 13,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,null,5,null,4]"],
      "output": ["[1,3,4]"]
    }
  },
  {
    "id": "binary-tree-convert-to-doubly-linked-list-2",
    "title": "Binary Tree Convert to Doubly Linked List",
    "problemStatement": "Write a function to convert a binary tree to a doubly linked list.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [4,2,5,1,3]",
        "outputText": "Output: [1,2,3,4,5]",
        "explanation": "Explanation: After converting the binary tree to a doubly linked list, the list is [1,2,3,4,5]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (0 ≤ n ≤ 2000)</li>",
    "difficulty": "Hard",
    "category": "Binary Tree",
    "order": 14,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[4,2,5,1,3]"],
      "output": ["[1,2,3,4,5]"]
    }
  },
  {
    "id": "binary-tree-diameter-of-binary-tree-2",
    "title": "Binary Tree Diameter of Binary Tree",
    "problemStatement": "Write a function to find the diameter of a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,4,5]",
        "outputText": "Output: 3",
        "explanation": "Explanation: The diameter of the binary tree is 3."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 10000)</li>",
    "difficulty": "Easy",
    "category": "Binary Tree",
    "order": 15,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,4,5]"],
      "output": ["3"]
    }
  },
  {
    "id": "binary-tree-closest-binary-search-tree-value-2",
    "title": "Binary Tree Closest Binary Search Tree Value",
    "problemStatement": "Write a function to find the value in a binary search tree that is closest to a given target value.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [4,2,5,1,3], target = 3.714286",
        "outputText": "Output: 4",
        "explanation": "Explanation: The value 4 in the binary search tree is closest to the target value 3.714286."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 16,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[4,2,5,1,3]", "3.714286"],
      "output": ["4"]
    }
  },
  {
    "id": "binary-tree-closest-binary-search-tree-value-2",
    "title": "Binary Tree Closest Binary Search Tree Value",
    "problemStatement": "Write a function to find the value in a binary search tree that is closest to a given target value.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [4,2,5,1,3], target = 3.714286",
        "outputText": "Output: 4",
        "explanation": "Explanation: The value 4 in the binary search tree is closest to the target value 3.714286."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 16,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[4,2,5,1,3]", "3.714286"],
      "output": ["4"]
    }
  },

  {
    "id": "binary-search-tree-kth-smallest-element-in-a-bst-2",
    "title": "Binary Search Tree Kth Smallest Element in a BST",
    "problemStatement": "Write a function to find the kth smallest element in a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [3,1,4,null,2], k = 1",
        "outputText": "Output: 1",
        "explanation": "Explanation: The 1st smallest element in the binary search tree is 1."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 17,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[3,1,4,null,2]", "1"],
      "output": ["1"]
    }
  },
  {
    "id": "binary-search-tree-range-sum-of-bst-2",
    "title": "Binary Search Tree Range Sum of BST",
    "problemStatement": "Write a function to find the sum of all values in a binary search tree within a given range [low, high].",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15",
        "outputText": "Output: 32",
        "explanation": "Explanation: The sum of values in the binary search tree within the range [7,15] is 32."
      }
    ],
    "constraints": "<li>All values in the tree are unique.</li>",
    "difficulty": "Medium",
    "category": "Binary Search Tree",
    "order": 18,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[10,5,15,3,7,null,18]", "7", "15"],
      "output": ["32"]
    }
  },

  {
    "id": "binary-tree-all-paths-from-root-to-leaves-2",
    "title": "Binary Tree All Paths From Root to Leaves",
    "problemStatement": "Write a function to return all root-to-leaf paths in a binary tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: [1,2,3,null,5]",
        "outputText": "Output: [[1,2,5],[1,3]]",
        "explanation": "Explanation: The root-to-leaf paths in the binary tree are [[1,2,5],[1,3]]."
      }
    ],
    "constraints": "<li>Number of nodes in the tree: (1 ≤ n ≤ 100)</li>",
    "difficulty": "Medium",
    "category": "Binary Tree",
    "order": 19,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[1,2,3,null,5]"],
      "output": ["[[1,2,5],[1,3]]"]
    }
  },
  {
    "id": "binary-search-tree-convert-sorted-array-to-binary-search-tree-2",
    "title": "Binary Search Tree Convert Sorted Array to Binary Search Tree",
    "problemStatement": "Write a function to convert a sorted array into a binary search tree.",
    "examples": [
      {
        "id": 0,
        "inputText": "Input: nums = [-10,-3,0,5,9]",
        "outputText": "Output: [0,-3,9,-10,null,5]",
        "explanation": "Explanation: The binary search tree generated from the sorted array is [0,-3,9,-10,null,5]."
      }
    ],
    "constraints": "<li>The length of the given array will be between (1) and (10^4).</li>",
    "difficulty": "Easy",
    "category": "Binary Search Tree",
    "order": 20,
    "videoId": "video_id_here",
    "starterCode": "starter_code_here",
    "testCase": {
      "input": ["[-10,-3,0,5,9]"],
      "output": ["[0,-3,9,-10,null,5]"]
    }
  }
]
